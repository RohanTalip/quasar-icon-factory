#!/usr/bin/env node

/**
 * Simple module that takes an original image and resizes
 * it to common web icon sizes. It will retain transparency.
 * @module icon-factory
 * @exports iconfactory
 */

const fs = require('fs')
    , sharp = require('sharp')
    , imagemin = require('imagemin')
    , imageminPngquant = require('imagemin-pngquant')
    , imageminPngcrush = require('imagemin-pngcrush')
    , png2icons = require('png2icons')
    , dimensions = require('../sizes.js')

/**
 * Creates a set of images
 * @param {string} src - image location
 * @param {string} target - where to drop the images
 * @param {string} sizes - js object, optional
 */

exports.build = function(src, target, sizes) {

    // exit conditions
    if(!fs.existsSync(src))   {
        console.log('source image not found')
        process.exit(0);
    }
    if(!fs.existsSync(target)) {
        console.log('target directory not found')
        process.exit(0);
    }

    sharp.concurrency(1)
    const image = sharp(src)
    let output

    if (sizes) {
        // dimensions = sizes
    }
    for (let type in dimensions.preset) {
        if (dimensions.preset.hasOwnProperty(type)) {
            for (let size of dimensions.preset[type].sizes) {
                if (dimensions.preset[type].infix === true) {
                    output = `${target}/${dimensions.preset[type].prefix}${size}x${size}${dimensions.preset[type].suffix}`
                } else {
                    output = `${target}/${dimensions.preset[type].prefix}${dimensions.preset[type].suffix}`
                }
                image
                    .resize(size, size)
                    .crop(sharp.strategy.centre)
                    .toFile(output)
                    .catch(err => {
                        console.log(err)
                    })
            }
        }
    }
}

exports.minify = function(target,type) {
    // sharp does
    if (type === 'crush') {
        imagemin([target+'/*.png'], target, {
            plugins: [
                imageminPngcrush()
            ]
        }).then(() => {
            console.log(`${type.size} optimized`)
        })
    }
    else {
        // todo: wire in options
        imagemin([target+'/*.png'], target, {
            plugins: [
                imageminPngquant({quality: '65-80'})
            ]
        })
    }
}

exports.icns = function (src, target) {
    let input = fs.readFileSync(src)
    let out = png2icons.createICNS(input, png2icons.BILINEAR, 0)
    fs.writeFileSync(`${target}/icon.icns`, out)

    out = png2icons.createICO(input, png2icons.BICUBIC, 0, false)
    fs.writeFileSync(`${target}/icon.ico`, out)
    out = png2icons.createICO(input, png2icons.BICUBIC, 0, false)
    fs.writeFileSync(`${target}/favicon.ico`, out)

    out = png2icons.createICO(input, png2icons.BEZIER, 20, true);
    fs.writeFileSync(`${target}/icon_bmp.ico`, out);
}